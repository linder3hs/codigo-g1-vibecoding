# Multi-stage Dockerfile for Production Environment
# Stage 1: Build the application
# Stage 2: Serve with nginx

# ===== BUILD STAGE =====
FROM node:22-alpine AS builder

# Set working directory
WORKDIR /app

# Install system dependencies
RUN apk add --no-cache git

# Copy package files for better Docker layer caching
COPY package*.json ./

# Install all dependencies (including devDependencies needed for build)
RUN npm i && npm cache clean --force

# Copy source code
COPY . .

# Build the application for production
RUN npm run build

# ===== PRODUCTION STAGE =====
FROM nginx:alpine AS production

# Install curl for health checks
RUN apk add --no-cache curl

# Remove default nginx website
RUN rm -rf /usr/share/nginx/html/*

# Copy built application from builder stage
COPY --from=builder /app/dist /usr/share/nginx/html

# Copy nginx configuration
COPY nginx.conf /etc/nginx/nginx.conf

# Create nginx directories and set proper permissions
RUN mkdir -p /var/cache/nginx && \
    chown -R nginx:nginx /usr/share/nginx/html && \
    chown -R nginx:nginx /var/cache/nginx && \
    chown -R nginx:nginx /var/log/nginx && \
    chown -R nginx:nginx /etc/nginx/conf.d && \
    chmod -R 755 /var/cache/nginx && \
    chmod 755 /var/run

# Note: nginx will run as root to handle system operations but will drop privileges for worker processes

# Expose port 80
EXPOSE 80

# Health check to ensure nginx is serving content
HEALTHCHECK --interval=30s --timeout=3s --start-period=5s --retries=3 \
    CMD curl -f http://localhost:80 || exit 1

# Start nginx
CMD ["nginx", "-g", "daemon off;"]
